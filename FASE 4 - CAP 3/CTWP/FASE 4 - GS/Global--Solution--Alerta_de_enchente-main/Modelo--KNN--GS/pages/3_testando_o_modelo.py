# Imports
import pandas as pd
import numpy as np
import streamlit as st
from joblib import load
from sklearn.impute import SimpleImputer

# T√≠tulo
st.title('üî¨ Teste do Modelo KNN com Dados Aleat√≥rios')
st.markdown('''
Vamos simular uma nova base com os mesmos padr√µes dos dados reais, e verificar como o modelo KNN treinado se comporta.
''')

# Carrega a base original para extrair estrutura
df_real = pd.read_csv("dados_externos\dados.csv")

# Remove a vari√°vel alvo (flood) da simula√ß√£o
X_real = df_real.select_dtypes(include=[np.number]).drop('flood', axis=1)

# Limites das vari√°veis
minimos = X_real.min()
maximos = X_real.max()

# Tamanho da nova base aleat√≥ria
n_amostras = 50  # voc√™ pode ajustar esse valor

# Gera base aleat√≥ria com numpy dentro dos limites
dados_aleatorios = {
    coluna: np.random.uniform(low=minimos[coluna], high=maximos[coluna], size=n_amostras)
    for coluna in X_real.columns
}

df_aleatorio = pd.DataFrame(dados_aleatorios)
st.subheader("üìä Base Aleat√≥ria Gerada")
st.dataframe(df_aleatorio)

# Carregando modelo e pr√©-processadores
knn_model = load("modelo_ml/modelo_knn.pkl")
scaler = load("modelo_ml/scaler_knn.pkl")
imputer = load("modelo_ml/imputer_knn.pkl")

# Previs√£o com os dados aleat√≥rios
X_imputado = imputer.transform(df_aleatorio)
X_escalado = scaler.transform(X_imputado)
y_pred = knn_model.predict(X_escalado)

# Mostrando resultados
st.subheader("üîé Previs√µes do Modelo KNN")
df_resultado = df_aleatorio.copy()
df_resultado['Previs√£o'] = y_pred
st.dataframe(df_resultado)

# Contagem de classes previstas
st.subheader("üìà Distribui√ß√£o das Classes Previstas")
st.bar_chart(df_resultado['Previs√£o'].value_counts())

# Conclus√£o do Projeto
st.header("üìå Conclus√£o")

st.markdown("""
Este projeto apresentou uma abordagem completa de classifica√ß√£o utilizando o algoritmo **K-Nearest Neighbors (KNN)**. O modelo foi escolhido com base em seu excelente desempenho em testes, alcan√ßando uma acur√°cia pr√≥xima de 99%.

Al√©m da constru√ß√£o do modelo, destacamos boas pr√°ticas como:
- **Tratamento de valores ausentes** com `SimpleImputer`;
- **Normaliza√ß√£o dos dados** com `StandardScaler`;
- **Salvamento e reutiliza√ß√£o** do modelo e dos pr√©-processadores com `joblib`;
- **Avalia√ß√£o clara e objetiva** por meio de m√©tricas e relat√≥rios de desempenho;
- **Capacidade de aplica√ß√£o pr√°tica**, inclusive em bases aleat√≥rias ou externas.

Com isso, o sistema est√° pronto para ser integrado em aplica√ß√µes reais, com confian√ßa em sua capacidade de generaliza√ß√£o e manuten√ß√£o. Essa estrutura modular e reutiliz√°vel torna o modelo robusto e adapt√°vel para diferentes conjuntos de dados e cen√°rios.
""")




